import streamlit as st
import streamlit.components.v1 as components


st.markdown('# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–µ–π üî•PyTorch')

st.image('aux/dataset-pt.png', caption='–û–±—â–∞—è —Å—Ö–µ–º–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –¥–∞–Ω–Ω—ã—Ö, Dataset, Dataloader –∏ –º–æ–¥–µ–ª–∏')


'''

–î–ª—è –ø–æ–¥–≥—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ PyTorch –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –º–∞–ª–æ, 
—Ç–æ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ —Ç–µ–Ω–∑–æ—Ä –∏ –ø–æ–¥–∞–≤–∞—Ç—å –Ω–∞ –≤—Ö–æ–¥ –º–æ–¥–µ–ª–∏, –Ω–æ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞ 
–±–∞—Ç—á–∏, —Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `DataLoader`. 

## –¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

### –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)

```python
from sklearn.datasets import make_classification
X, y = make_classification()
print(f'Types: {type(X)}, {type(y)}')

Types: <class 'numpy.ndarray'>, <class 'numpy.ndarray'>

model = nn.Sequential(
    nn.Linear(20, 32),
    nn.Sigmoid(),
    nn.Linear(32, 1)
)

model(X)

TypeError: linear(): argument 'input' (position 1) must be Tensor, 
           not numpy.ndarray
``` 

–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–µ–Ω–∑–æ—Ä—ã –º–æ–∂–Ω–æ —Ç–∞–∫: 

```python
X = torch.from_numpy(X).type(torch.float)
y = torch.from_numpy(y).type(torch.float)

y_pred = model(X)
print(y_pred)

tensor([[0.0214],
        [0.0659],
        [0.1001]], grad_fn=<SliceBackward0>)
```

### TensorDataset

–î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å TensorDataset: 

```python
from torch.utils.data import TensorDataset

dataset = TensorDataset(
    torch.from_numpy(X).type(torch.float32), 
    torch.from_numpy(y).type(torch.float32)
)
``` 

–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –≤—ã–±–æ—Ä–∫—É –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—É—é, —Ç–æ –º–æ–∂–Ω–æ 
–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π `torch.utils.data.random_split`: 

```python
train_ds, valid_ds = torch.utils.data.random_split(train_dataset, [70, 30])
```

–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç—ã –≤ `DataLoader`:

```python
from torch.utils.data import TensorDataset, DataLoader

train_loader = DataLoader(train_ds, shuffle=True, batch_size=64)
valid_loader = DataLoader(valid_ds, shuffle=True, batch_size=64)
```

## –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è

–î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ `torchvision.datasets` –µ—Å—Ç—å –∫–ª–∞—Å—Å `ImageFolder`. –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–∞ —Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: 
'''
st.code('''
üìÇdata
|--üìÇtrain
|----üìÇclass1
|------üñºimg1.png
|------üñºimg2.png
|------ ...
|----üìÇclass2
|------üñºimg1.png
|------üñºimg2.png
|------ ...
|--üìÇvalid
|----üìÇclass1
|------üñºimg1.png
|------üñºimg2.png
|------ ...
|----üìÇclass2
|------üñºimg1.png
|------üñºimg2.png
|------ ...

'''
)
'''

```python
from torchvision.datasets import ImageFolder

train_dataset = ImageFolder('data/train', transform=augmentations)

print(train_dataset.class_to_idx)
> {'class1': 0, 'class2': 1}

train_loader = DataLoader(train_dataset, shuffle=True, batch_size=32)
```

–ß–∏—Å–ª–æ –∫–ª–∞—Å—Å–æ–≤ `ImageFolder` –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –ø–æ —á–∏—Å–ª—É –ø–∞–ø–æ–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö `train`, `valid` –∏ —Ç.–¥.
–û–Ω —É–ø–æ—Ä—è–¥–æ—á–∏—Ç –∏—Ö –ø–æ –∏–º–µ–Ω–∏ –∏ –Ω–∞–∑–Ω–∞—á–∏—Ç –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤ –æ—Ç 0 –¥–æ N-1 (–≥–¥–µ N ‚Äì —á–∏—Å–ª–æ –∫–ª–∞—Å—Å–æ–≤). 

–ß–∞—Å—Ç–æ `ImageFolder` –Ω–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –Ω–∞—à–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º. –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–±—É—á–µ–Ω–∏—è Denoising Autoencoder –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–±–∏—Ä–∞—Ç—å 
–∏–∑ –ø–∞–ø–æ–∫ –ø–∞—Ä—ã –∫–∞—Ä—Ç–∏–Ω–æ–∫: —á–∏—Å—Ç—É—é –∏ –∑–∞—à—É–º–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é. –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∞ –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –∫–ª–∞—Å—Å–∞ `CustomImageDataset`:

```python
import os
from torchvision import transforms as T
from torchvision.io import read_image
from torch.utils.data import Dataset

preprocessing = T.Compose(
    [
        T.ToPILImage(),
        T.Resize((w, h)), # <------ —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä
        T.ToTensor()
    ]
)

class CustomImageDataset(Dataset):
    def __init__(self, noise_dir, clean_dir, aug=None):
        self.noise_dir = noise_dir
        self.clean_dir = clean_dir
        self.noise_names = sorted(os.listdir(noise_dir))
        self.clean_names = sorted(os.listdir(clean_dir))
        self.aug = aug

    def __len__(self):
        return len(self.noise_names)
    

    def __getitem__(self, idx):
        noisy_img = read_image(os.path.join(self.noise_dir, self.noise_names[idx]))
        clean_img = read_image(os.path.join(self.clean_dir, self.clean_names[idx]))
        if self.aug:
            noisy_img = self.aug(noisy_img)
            clean_img = self.aug(clean_img)
        return noisy_img, clean_img <- –≠—Ç–æ —Ç–æ, —á—Ç–æ –±—É–¥–µ—Ç –≤ —Ü–∏–∫–ª–µ –æ–±—É—á–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å loader
```
'''

'''
–î–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ `DataSet` –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
–∑–∞–¥–∞—Ç—å –∫–∞–∫ –º–∏–Ω–∏–º—É–º 3 –º–µ—Ç–æ–¥–∞: 
1. `__init__()` ‚Äì –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, —Ç—É–¥–∞ –±—É–¥–µ–º –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø—É—Ç–∏ –∫ –Ω–∞—à–∏–º —Ñ–∞–π–ª–∞–º –∏–ª–∏ –ø–∞–ø–∫–∞–º
2. `__getitem__()` ‚Äì –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ (—á–∞—â–µ –≤—Å–µ–≥–æ) –∏–Ω–¥–µ–∫—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
–Ω–∞—à–µ–π –≤—ã–±–æ—Ä–∫–∏. –ò–Ω–∞—á–µ –≥–æ–≤–æ—Ä—è –º–µ—Ç–æ–¥ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: —á—Ç–æ –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å DataLoader –≤ –æ–±—É—á—â–∞—é—â–µ–º —Ü–∏–∫–ª–µ? 
3. `__len__()` ‚Äì –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –æ–±—ä–µ–º –≤—ã–±–æ—Ä–∫–∏



'''

components.html(
    """
    <!-- Yandex.Metrika counter -->
<script type="text/javascript" >
   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
   m[i].l=1*new Date();
   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

   ym(92504528, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
   });
</script>
<noscript><div><img src="https://mc.yandex.ru/watch/92504528" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->
""")


