
import streamlit as st

'''

# Как выбрать функцию потерь для задачи распознавания лиц

Оригинал: [https://neptune.ai/blog/how-to-choose-loss-function-for-face-recognition](https://neptune.ai/blog/how-to-choose-loss-function-for-face-recognition)

Распознавание лиц – одна из самых интересных задач глубокого обучения. На поверхностном уровне ее можно рассматривать как задачу мультиклассовой классификации. Однако, когда вы приступите к реализации, вы поймете, что за ней скрывается нечто более сложное. Выбор функции потерь – решающий фактор, который будет определять производительность модели. 

Для моделей распознавания лиц важным моментом является способность извлекать такие признаки из изображений, чтобы все изображения одного и того же лица располагались близко друг к другу в пространстве признаков, а изображения разных лиц – далеко друг от друга. Иначе говоря, нам нужна модель, которая будет уменьшать расстояния внутри класса и максимизировать расстояния между объектами разных классов в пространстве признаков. В первой части этой заметки описаны функции потерь, которые обеспечивают контроль над этими двумя задачами. 

В отличии от классической задачи классификации, у нас нет цели собирать примеры изображений для всех возможных лиц, а значит и использовать функции потерь, которые зависят от фиксированного числа классов. Во второй части статьи рассмотрены функции потерь, которые позволяют модели выучить качественные представления (репрезентации) объектов, а не просто классифицировать по заранее заданному набору классов. Выученные представления объектов могут быть поданы на вход любому подходящему классификатору, например kNN. 

# Классификационные функции потерь

Классификационные функции потерь используются в случаях, когда необходимо отнести объект к одному из заранее заданных классов. В моем понимании, они работают лучше, когда у вас есть небольшое фиксированное число классов и не очень много доступных данных. Для измерения близости можно использовать евклидово расстояние или косинусную близость. 

## Евклидово расстояние

### Softmax loss

**Предыстория / мотивация**

Функция потерь софтмакс есть ничто иное как категориальная кросс-энтропия с софтмакс-активацией на последнем слое сети. Это одна из базовых функций потерь для задачи распознавания лиц и, возможно, одна из худших. Она включена в этот обзор для полноты картины и понимания некоторых функций потерь, которые являются её модификациями. 

**Определение**

Softmax задается следующим образом: '''

st.image('https://lh3.googleusercontent.com/wC2QldxOFZK0CXcOKo9nApAM6FWvjtgJQChzG6Unxh31WPGFF9BqPEKczg_6rHGkb_to_HXG7ko-OH35nfFu4JhgPmp6Ycmyfs9dr78ohdLKt7TLvTWvUoOBpaMPQu3J3firAAMh')

'''
$x_i$ – вектор признаков $i$-го изображения. $W_j$ вектор параметров и $b_j$ – свободный параметр. Число классов и число изображений обозначены как $n$ и $m$ соответственно, $y$ – класс $i$-го изображения. 

**Преимущества**

- эта функция хорошо изучена и имеет фундаментальное обоснование в теории информации [[подробнее](https://en.wikipedia.org/wiki/Cross_entropy#Motivation)]
- большинство фреймворков для машинного обучения имеют реализованные варианты функции

**Недостатки**

- каждый класс должен быть представлен в обучающем датасете
- нет четкого контроля над дистанциями между объектами в и вне классов

'''