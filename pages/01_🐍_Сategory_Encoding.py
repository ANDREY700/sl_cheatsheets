import streamlit as st
import pandas as pd
import streamlit.components.v1 as components


st.title('–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤')

'''–ú–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –∏–º–µ—é—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—É—é –ø—Ä–∏—Ä–æ–¥—É: 
* —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è (–Ω–∞—á–∞–ª—å–Ω—ã–π / —Å—Ä–µ–¥–Ω–∏–π / –≤—ã—Å—à–∏–π) 
* –æ–∫—Ä—É–≥ (–°–ê–û / –í–ê–û / –¶–ê–û) 
* –∏–Ω–¥–µ–∫—Å 
* –∏ —Ç.–¥.
'''


'## –ó–∞—á–µ–º'

'–ú–æ–¥–µ–ª–∏ –Ω–µ —É–º–µ—é—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞–ø—Ä—è–º—É—é, –∏—Ö –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ —á–∏—Å–ª–æ–≤–æ–º –≤–∏–¥–µ.'

'## –°–ø–æ—Å–æ–±—ã'

'''

`sklearn`
* [Label Encoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html)
     * [Ordinal Encoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OrdinalEncoder.html)
 * [One Hot Encoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html) 

 `target encoder`
 * [Binary Encoder](https://contrib.scikit-learn.org/category_encoders/binary.html)
 * [Helmert Encoder](https://contrib.scikit-learn.org/category_encoders/helmert.html)
 * [Backward-Difference Encoder](https://contrib.scikit-learn.org/category_encoders/backward_difference.html)
 * [Target Encoder](https://contrib.scikit-learn.org/category_encoders/targetencoder.html)
'''


"""---"""
'### Label Encoder'

'–ö–æ–¥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∞ —Ü–∏—Ñ—Ä–æ–π –æ—Ç $0$ –¥–æ $N-1$, –≥–¥–µ $N$ - —á–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–∞'

'''
```python
from sklearn.preprocessing import LabelEncoder

le = LabelEncoder()
le.fit(df['category'])
encoded_district = le.transform(df['category'])
df.assign(encoded=encoded_district)
```

|    | category   |   encoded | 
|---:|:-----------|----------:| 
|  0 | VAO        |         2 |
|  1 | CAO        |         0 |
|  2 | SAO        |         1 |


üü¢ –ü—Ä–æ—Å—Ç–æ–π 

üî¥ –ò—Å–∫–∞–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ: —Ç–µ–ø–µ—Ä—å `VAO` —Å—Ç–∞–ª–æ –≤ –¥–≤–∞ —Ä–∞–∑–∞ ¬´–±–æ–ª—å—à–µ¬ª, —á–µ–º `SAO`

‚ùóÔ∏è –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ `(n_samples)`, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å—Ä–∞–∑—É, —Ç–æ —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `OrdinalEncoder` 

‚ùóÔ∏è –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ø–æ—Ä—è–¥–∫–æ–≤–æ–π —à–∫–∞–ª–µ, —Ç–æ –Ω—É–∂–Ω–æ —è–≤–Ω–æ –∑–∞–¥–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫: `{–Ω–∏–∑–∫–∏–π : 0, —Å—Ä–µ–¥–Ω–∏–π : 1, –≤—ã—Å–æ–∫–∏–π : 2}` 

üêç [sklearn.preprocessing.LabelEncoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html) 

üêç [sklearn.preprocessing.OrdinalEncoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OrdinalEncoder.html#sklearn.preprocessing.OrdinalEncoder)
'''

"""---"""

'### One Hot Encoder' 

'''
–°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª—å–∫–æ –∂–µ –Ω–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤, —Å–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–∞. 
–ù–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ –∏ —Å—Ç–æ–ª–±—Ü–∞ 1, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Å–∏—Ç–µ–ª–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∞, 0 ‚Äì –µ—Å–ª–∏ –Ω–µ—Ç''' 

'''
```python   
from sklearn.preprocessing import OneHotEncoder
ohe = OneHotEncoder(sparse=False)
ohe.fit_transform(df)
```

|    | category   |   CAO |   SAO |   VAO |
|---:|:-----------|-----------:|-----------:|-----------:|
|  0 | VAO        |          0 |          0 |          1 |
|  1 | CAO        |          1 |          0 |          0 |
|  2 | SAO        |          0 |          1 |          0 |

üü¢ –•–æ—Ä–æ—à–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è 

üî¥ –°–∏–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤

üêç [sklearn.preprocessing.OneHotEncoder](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder)

üêç [padnas.get_dummies](https://pandas.pydata.org/docs/reference/api/pandas.get_dummies.html)

'''

"""---"""

'### Binary Encoder'

'''

–ü—Ä–∏–Ω—Ü–∏–ø –≤ —Ç–æ–º, —á—Ç–æ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ $N$ –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å $\log_2N$ –±–∏–Ω–∞—Ä–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏. 
–ù–∞–ø—Ä–∏–º–µ—Ä —á–∏—Å–ª–æ $22$ –º–æ–∂–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ $10110$, —Ç.–µ $5$ –±–∏—Ç–∞–º–∏.
'''

'''
```python
from category_encoders import BinaryEncoder
be = BinaryEncoder()
pd.concat([df, be.fit_transform(df)], axis=1)
```


|    | category   |   category_0 |   category_1 |   category_2 |
|---:|:-----------|:------------:|-------------:|-------------:|
|  0 | VAO        |            0 |            0 |            1 |
|  1 | CAO        |            0 |            1 |            0 |
|  2 | SAO        |            0 |            1 |            1 |
|  3 | SVAO       |            1 |            0 |            0 |
|  4 | SZAO       |            1 |            0 |            1 |



üü¢ –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π  

üî¥ –ü—Ä–æ–ø–∞–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å

üêç [BinaryEncoder](https://contrib.scikit-learn.org/category_encoders/binary.html)
'''
"""---"""

'### Helmert Encoder'

'''
–°–æ–∑–¥–∞–µ—Ç—Å—è –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ $(N, N‚Äì1)$, –≤—ã—à–µ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏ –∏ –Ω–∞ –Ω–µ–π —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã $‚Äì1$, –ø–æ–¥ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª—å—é –ø–æ—Ä—è–¥–∫–æ–≤—ã–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äì $0$

```python
from category_encoders.helmert import HelmertEncoder
he = HelmertEncoder(drop_invariant=True)
pd.concat([df, he.fit_transform(df)], axis=1) 
```

|    | category   |   category_0 |   category_1 |   category_2 |
|---:|:-----------|-------------:|-------------:|-------------:|
|  0 | VAO        |           -1 |           -1 |           -1 |
|  1 | CAO        |            1 |           -1 |           -1 |
|  2 | SAO        |            0 |            2 |           -1 |
|  3 | SVAO       |            0 |            0 |            3 |


üü¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–æ—Ä—è–¥–∫–æ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö 

üî¥ –ù–µ–æ—á–µ–≤–∏–¥–µ–Ω –≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏

‚ùóÔ∏è –ù–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: [How to calculate Helmert Coding](https://stats.stackexchange.com/questions/411134/how-to-calculate-helmert-coding/411837#411837)

üêç [Helmert Encoder ](https://contrib.scikit-learn.org/category_encoders/helmert.html)

'''

"""---"""

'''
### Backward-Difference Encoder

–ü–æ—Ö–æ–∂ –Ω–∞ `Helmert Encoder`. 
'''

st.image('aux/bd_encoder.png', width=280)
st.caption('$k$ ‚Äì —á–∏—Å–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø—Ä–∏–∑–Ω–∞–∫–∞')

'''
```python
from category_encoders import BackwardDifferenceEncoder
bde = BackwardDifferenceEncoder(drop_invariant=True)
pd.concat([df, 
           bde.fit_transform(df)], 
          axis=1)
```

|    | category   |   category_0 |   category_1 |   category_2 |   category_3 |
|---:|:-----------|-------------:|-------------:|-------------:|-------------:|
|  0 | VAO        |         -0.8 |         -0.6 |         -0.4 |         -0.2 |
|  1 | CAO        |          0.2 |         -0.6 |         -0.4 |         -0.2 |
|  2 | SAO        |          0.2 |          0.4 |         -0.4 |         -0.2 |
|  3 | SVAO       |          0.2 |          0.4 |          0.6 |         -0.2 |
|  4 | SZAO       |          0.2 |          0.4 |          0.6 |          0.8 |\


üêç [Backward Difference Coding](https://contrib.scikit-learn.org/category_encoders/backward_difference.html)

'''



"""---"""
'''
### Target Encoder

–ó–∞–º–µ–Ω—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ ([—Å–≥–ª–∞–∂–µ–Ω–Ω–æ–µ](https://www.kaggle.com/code/ryanholbrook/target-encoding/tutorial)) —Å—Ä–µ–¥–Ω–µ–µ –ø–æ —Ü–µ–ª–µ–≤–æ–º—É –ø—Ä–∏–∑–Ω–∞–∫—É: 

 ```python
from category_encoders import TargetEncoder
te = TargetEncoder()
pd.concat([df, te.fit_transform(df['category'], df['target'])], axis=1)
```

#### –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è


|    | category   |   target |   category |
|---:|:-----------|---------:|-----------:|
|  0 | VAO        |        1 |   0.526894 |
|  1 | VAO        |        0 |   0.526894 |
|  2 | SAO        |        0 |   0.65872  |
|  3 | SAO        |        1 |   0.65872  |
|  4 | SAO        |        1 |   0.65872  |


#### –†–µ–≥—Ä–µ—Å—Å–∏—è

|    | category   |   target |   category |
|---:|:-----------|---------:|-----------:|
|  0 | VAO        |      120 |    68.6038 |
|  1 | VAO        |       10 |    68.6038 |
|  2 | SAO        |       12 |    86.2685 |
|  3 | SAO        |      100 |    86.2685 |
|  4 | SAO        |      150 |    86.2685 |


üü¢ –ò–º–µ–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ 

üü¢ –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π 

üî¥ –ù–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ —Ü–µ–ª–µ–≤—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç ¬´—Å–º–µ—â–∞—Ç—å¬ª –æ—Ü–µ–Ω–∫–∏ 

üî¥ –¢—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π 

üêç [Target Encoder](https://contrib.scikit-learn.org/category_encoders/targetencoder.html)

'''

components.html(
    """
    <!-- Yandex.Metrika counter -->
<script type="text/javascript" >
   (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
   m[i].l=1*new Date();
   for (var j = 0; j < document.scripts.length; j++) {if (document.scripts[j].src === r) { return; }}
   k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
   (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

   ym(92504528, "init", {
        clickmap:true,
        trackLinks:true,
        accurateTrackBounce:true,
        webvisor:true
   });
</script>
<noscript><div><img src="https://mc.yandex.ru/watch/92504528" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->
""")